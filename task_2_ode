import numpy as np
import pandas as pd
import math
from scipy.special import jacobi

# –∫—Ä–∞–µ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
alpha_1 = -0.7
alpha_2 = -1
beta_1 = 0.75
beta_2 = 1
# —á–∏—Å–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
n = 7

def p(x): return 1.0 / (2 + x / 3.0)
def q(x): return math.exp(x / 5.0)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –ø–æ –°–ö–§ –°–∏–º–ø—Å–æ–Ω–∞
def Integrate(a, b, func, m):
    h = (b - a) / m
    alpha = a + h / 2
    beta = a + h
    return h / 6 * (func(a) + 4 * sum(func(alpha + k * h) for k in range(m)) +
                    func(b) + 2 * sum(func(beta + k * h) for k in range(m - 1)))

# –ü–µ—Ä–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å –ø–æ–º–æ—â—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏
def d(f):
    eps = 1e-10
    return lambda x: (f(x + eps) - f(x-eps)) / (2 * eps)

# –í—Ç–æ—Ä–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å –ø–æ–º–æ—â—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏
def dd(f):
    eps = 1e-5
    return lambda x: (f(x - eps) - 2 * f(x) + f(x+eps)) / eps**2

# –ó–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –õ–µ–∂–∞–Ω–¥—Ä–∞ —Å—Ç–µ–ø–µ–Ω–∏ i –≤ —Ç–æ—á–∫–µ x
def Omega(x, i): return math.sqrt((2 * i - 1) / 2.0) * jacobi(n = i - 1, alpha = 0, beta = 0)(x)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –õ–µ–∂–∞–Ω–¥—Ä–∞ —Å—Ç–µ–ø–µ–Ω–∏ i
def Omega_i(i): return lambda x: Omega(x, i)

# –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ L_2(-1, 1)
def Dot(y, z, n = 200):
    return Integrate(-1, 1, lambda x: y(x) * z(x), n)

# –ù–æ—Ä–º–∞ –≤ L_2(-1, 1)
def Norm(f):
    return math.sqrt(Dot(f, f))

# –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ H_L –¥–ª—è –∫—Ä–∞–µ–≤–æ–π –∑–∞–¥–∞—á–∏ —Ç–∏–ø–∞ III
def BilinearForm(y, z):

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥—ã–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    def UnderIntergal(x):
        return p(x) * d(y)(x) * d(z)(x) + q(x) * y(x) * z(x)

    return Integrate(-1, 1, UnderIntergal, 200) + alpha_1/alpha_2 * p(-1) * y(-1) * z(-1) + beta_1/beta_2 * p(1) * y(1) * z(1)

x = np.linspace(-1, 1, 1000)
p_max = max(map(p, x))
p_min = min(map(p, x))
q_max = max(map(q, x))
q_min = min(map(q, x))

# –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π y = C1*cos(nu*x) + C2*sin(nu*x) –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ det = 0
nu1 = 0.760936
nu2 = 1.9300737

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü –ø–æ —Ñ–æ—Ä–º—É–ª–µ
l_1_min = nu1**2 * p_min + q_min
l_1_max = nu1**2 * p_max + q_max
l_2_min = nu2**2 * p_min + q_min
l_2_max = nu2**2 * p_max + q_max

# –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def Calculate(nu):
    C = (beta_2 * nu * math.sin(nu) - beta_1 * math.cos(nu)) / (beta_1 * math.sin(nu) + beta_2 * nu * math.cos(nu))

    def eig_f(x): return math.cos(nu*x) + C * math.sin(nu*x)

    norm_eig_f = lambda x: eig_f(x) / Norm (eig_f)

    return norm_eig_f

# –ú–µ—Ç–æ–¥ –†–∏—Ç—Ü–∞
gamma_L = np.zeros((n, n))
for i in range(1, n+1):
    for j in range(1, n+1):
        gamma_L[i-1, j-1] = BilinearForm(Omega_i(i), Omega_i(j))

eigs_unsorted = list(np.linalg.eig(gamma_L))
eigs_unsorted[1] = eigs_unsorted[1].T
eigs = []
for i in range(n):
    eigs.append([eigs_unsorted[0][i], eigs_unsorted[1][i]])
eigs.sort()

for i in range(n):
    eigs[i].append(lambda x: sum([eigs[i][1][j] * Omega(x, j+1) for j in range(0, n)]))

# –í –∫–∞—á–µ—Ç—Å–≤–µ "—Ç–æ—á–Ω—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π –±—ã–ª–∏ –≤–∑—è—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –º–µ—Ç–æ–¥–∞ –†–∏—Ç—Ü–∞
print(l_1_min, "< ùúÜ_1 <", l_1_max)
print(l_2_min, "< ùúÜ_2 <", l_2_max)
data = {' ': ['min', 'max'],
        '–æ—Ü–µ–Ω–∫–∞ ùúÜ_1': [l_1_min, l_1_max],
        '–Ω–µ–≤—è–∑–∫–∞ ùúÜ_1': [l_1_min - eigs[0][0], l_1_max - eigs[0][0]],
        '–æ—Ü–µ–Ω–∫–∞ ùúÜ_2': [l_2_min , l_2_max],
        '–Ω–µ–≤—è–∑–∫–∞ ùúÜ_2': [l_2_min - eigs[1][0] , l_2_max - eigs[1][0]]}
pd.DataFrame(data)

# –í –∫–∞—á–µ—Ç—Å–≤–µ "—Ç–æ—á–Ω—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π –±—ã–ª–∏ –≤–∑—è—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –º–µ—Ç–æ–¥–∞ –†–∏—Ç—Ü–∞
norm_eig_f_1 = Calculate(nu1)
norm_eig_f_2 = Calculate(nu2)

print('ùúÜ_1 =', BilinearForm(norm_eig_f_1, norm_eig_f_1))
print('ùúÜ_2 =', BilinearForm(norm_eig_f_2, norm_eig_f_2))

data_1 = {'ùúÜ_1 —Ç–æ—á–Ω–æ–µ': [eigs[0][0]],
        'ùúÜ_1': [BilinearForm(norm_eig_f_1, norm_eig_f_1)],
        '–Ω–µ–≤—è–∑–∫–∞ ùúÜ_1': [BilinearForm(norm_eig_f_1, norm_eig_f_1) - eigs[0][0]],
        'ùúÜ_2 —Ç–æ—á–Ω–æ–µ': [eigs[1][0]],
        'ùúÜ_2': [BilinearForm(norm_eig_f_2, norm_eig_f_2)],
        '–Ω–µ–≤—è–∑–∫–∞ ùúÜ_2': [BilinearForm(norm_eig_f_2, norm_eig_f_2) - eigs[1][0]]}

pd.DataFrame(data_1)

columns = ['n', 'ùúÜ(n)', 'ùúÜ_diff', 'L*y-ùúÜ*y']
data = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã

lamb1_ex = eigs[0][0]

# –ú–µ—Ç–æ–¥ —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
for k in range(3, n+1):
    G = np.linalg.inv(gamma_L[:k,:k])
    x0 = 1.0 / k * np.ones((k, 1))
    accuracy = 10
    for i in range(accuracy):
        x1 = np.dot(G, x0)
        lamb = np.linalg.norm(x1, 2) / np.linalg.norm(x0, 2)
        x1 = x1 / np.linalg.norm(x1, 2)
        x0 = x1
    eigva = 1/lamb
    eig_f = lambda x: sum([x0[j] * omega(x, j+1) for j in range(0, k)])
    u = eig_f
    right = lambda x: eigva * u(x)
    left = lambda x: -(d(p)(x) * d(u)(x) + p(x) * dd(u)(x)) + q(x)*u(x)
    diff = lambda x: left(x) - right(x)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    row = {'n': k, 'ùúÜ(n)': eigva, 'ùúÜ_diff': eigva - lamb1_ex, 'L*y-ùúÜ*y': right(0) - left(0)}
    data.append(row)

# –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
table = pd.DataFrame(data, columns=columns)

table
